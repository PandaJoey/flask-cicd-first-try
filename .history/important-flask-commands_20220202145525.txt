#Instilation
mkdir myproject
cd myproject
python3 -m venv venv
. venv/bin/activate
pip install Flask

#Environment setup
export FLASK_APP=flaskr
export FLASK_ENV=development
flask run

#default url
http://127.0.0.1:5000/

#init database
flask init-db

#install project in virtual env after packaging init
pip install -e .

#to see project installed
pip list

#testing
pip install pytest coverage

#register truncatechars_html
<!--
    {% extends 'base.html' %} tells Jinja that this template should 
    replace the blocks from the base template. All the rendered 
    content must appear inside {% block %} tags that override blocks 
    from the base template.
  
    A useful pattern used here is to place {% block title %} inside 
    {% block header %}. This will set the title block and then 
    output the value of it into the header block, so that both 
    the window and page share the same title without writing it 
    twice.
  -->

#base html

  <!--
    g is automatically available in templates. Based on if 
    g.user is set (from load_logged_in_user), either the 
    username and a log out link are displayed, or links to 
    register and log in are displayed. url_for() is also 
    automatically available, and is used to generate URLs 
    to views instead of writing them out manually.
    
    After the page title, and before the content, the template 
    loops over each message returned by get_flashed_messages(). 
    You used flash() in the views to show error messages, and 
    this is the code that will display them.
    
    There are three blocks defined here that will be overridden 
    in the other templates:
    
    % block title % will change the title displayed in the 
    browser’s tab and window title.
    
    % block header % is similar to title but will change the 
    title displayed on the page.
    
    % block content % is where the content of each page goes,
    such as the login form or a blog post.
    
    The base template is directly in the templates directory. 
    To keep the others organized, the templates for a blueprint 
    will be placed in a directory with the same name as the blueprint. 
    -->

    #update html
    <!--
        This template has two forms. The first posts the edited data to 
        the current page (/<id>/update). The other form contains only a 
          button and specifies an action attribute that posts to the 
          delete view instead. The button uses some JavaScript to show a 
          confirmation dialog before submitting.
      
          The pattern {{ request.form['title'] or post['title'] }} is 
          used to choose what data appears in the form. When the form 
          hasn’t been submitted, the original post data appears, but if 
          invalid form data was posted you want to display that so the 
          user can fix the error, so request.form is used instead. 
          request is another variable that’s automatically available 
          in templates.
      -->